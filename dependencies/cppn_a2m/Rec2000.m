function out = Rec2000(Rec)
%
% ABAQUS increment start record output to MATLAB
%
% Syntax
%     #Rec# = Fil2str('*.fil');
%     #out# = Rec2000(#Rec#)
%
% Description
%     Read increment start record output from the results (*.fil) file
%     generated from the ABAQUS finite element software. The asterisk (*)
%     is replaced by the name of the results file. The record key for
%     increment start record output is 2000. See section < < Results file
%     output format > > in ABAQUS Analysis User's manual for more details.
%     The following option with parameter has to be specified in the ABAQUS
%     input file for the results (*.fil) file to be created:
%         ...
%         *FILE FORMAT, ASCII
%         ...
%     NOTE: The results file (*.fil) must be placed in the same directory
%     with the MATLAB source files in order to be processed.
%
% Input parameters
%     #Rec# (string) is an one-row string containing the ASCII code of the
%         ABAQUS results (*.fil) file. It is generated by the function
%         Fil2str.m.
%
% Output parameters
%     #out# ([#n# x 21]) is a cell array containing the attributes of
%         the record key 2000 as follows:
%         Column  1�����Total time.
%         Column  2�����Step time.
%         Column  3�����Maximum creep strain-rate ratio (control of
%         solution-dependent amplitude) in Abaqus/Standard; currently not
%         used in Abaqus/Explicit.
%         Column  4�����Solution-dependent amplitude in Abaqus/Standard;
%         currently not used in Abaqus/Explicit.
%         Column  5�����Procedure type: gives a key to the step type. See
%         Table 5.1.2�1 at the end of this section.
%         Column  6�����Step number.
%         Column  7�����Increment number.
%         Column  8�����Linear perturbation flag in Abaqus/Standard: 0 if
%         general step, 1 if linear perturbation step; currently not used
%         in Abaqus/Explicit.
%         Column  9�����Load proportionality factor: nonzero only in static
%         Riks steps; currently not used in Abaqus/Explicit.
%         Column  10�����Frequency (cycles/time) in a steady-state dynamic
%         response analysis or steady-state transport angular velocity
%         (rad/time) in a steady-state transport analysis; currently not
%         used in Abaqus/Explicit.
%         Column  11�����Time increment.
%         Columns  12-21�����The step subheading entered as the first data
%         line of the *STEP option (A8�format). Equivalent to the step
%         description in Abaqus/CAE.
%         where #n# is the number of increments.
%
% _________________________________________________________________________
% Abaqus2Matlab - www.abaqus2matlab.com
% Copyright (c) 2016 by George Papazafeiropoulos
%
% If using this toolbox for research or industrial purposes, please cite:
% G. Papazafeiropoulos, M. Muniz-Calvente, E. Martinez-Paneda.
% Abaqus2Matlab: a suitable tool for finite element post-processing (submitted)
%
%

ind = strfind(Rec,'I 42000'); % record key for increment start record output (2000)
if isempty(ind)
    out=[];
    return;
end
nextpos=numel('I 42000')+1;
% Initialize record length matrix
NW=zeros(numel(ind),1);
for i=1:numel(ind)
    % find the record length (NW)
    Rec2=Rec(ind(i)-7:ind(i));
    indNW=strfind(Rec2,'*'); % record starting position
    % ensure that the record exists and that the record type key is at
    % location 2
    if isempty(indNW) || indNW>3
        ind(i)=NaN;
        continue;
    end
    % number of digits of record length
    ind1=indNW+2; % 1st digit of 2-digit integer of 1st data item
    ind2=indNW+2+1; % 2nd digit of 2-digit integer of 1st data item
    a1=str2num(Rec2(ind1:ind2));
    % Record length (NW)
    ind1=ind1+2; % +2 digits
    ind2=ind2+a1; % +2-digit integer
    NW(i)=str2num(Rec2(ind1:ind2));
end
ind=ind(~isnan(ind));
Out1=zeros(numel(ind),4);
Out2=zeros(numel(ind),4);
Out3=zeros(numel(ind),3);
Out4=char(zeros(numel(ind),80));
for i=1:numel(ind)
    ind2=ind(i)+nextpos-2;
    % total time, step time, maximum creep strain-rate ratio and
    % solution-dependent amplitude
    for j=1:4
        ind1=ind2+1+1; % +1 character+1
        ind2=ind2+1+22; % +1 character +22 floating point digits
        Out1(i,j)=str2num(Rec(ind1:ind2));
    end
    % procedure type, step number, increment number and linear perturbation
    % flag
    for j=1:4
        % number of digits
        ind1=ind2+1+1; % +1 character+1
        ind2=ind2+2+1; % +2 digits+1
        a2=str2num(Rec(ind1:ind2));
        % number
        ind1=ind1+2; % +2 digits
        ind2=ind2+a2; % +2-digit integer
        Out2(i,j)=str2num(Rec(ind1:ind2));
    end
    % Load proportionality factor, Frequency (cycles/time) and time
    % increment
    for j=1:3
        ind1=ind2+1+1; % +1 character+1
        ind2=ind2+1+22; % +1 character +22 floating point digits
        Out3(i,j)=str2num(Rec(ind1:ind2));
    end
    % Attributes 12�21
    for j=1:10
        % step subheading
        ind1=ind2+1+1; % +1 character+1
        ind2=ind2+8+1; % +8-character string+1
        Out4(i,1+8*(j-1):8+8*(j-1))=Rec(ind1:ind2);
    end
end
% Assemply of matrices for output
out=[num2cell(Out1) num2cell(Out2) num2cell(Out3) cellstr(Out4)];

end

